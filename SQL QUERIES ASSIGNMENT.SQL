--1. Find out the selling cost AVG for packages developed in Pascal. 
	SELECT AVG(SCOST) 
	FROM SOFTWARE
	WHERE DEVELOPIN = 'PASCAL';

--2. Display Names, Ages of all Programmers. 
	SELECT PNAME, CAST(DATEDIFF(DAY, DOB, CAST(GETDATE() AS DATE))/365.25 AS INT) AS AGE
	FROM PROGRAMMER;

--3. Display the Names of those who have done the DAP Course. 
	SELECT PNAME AS NAME
	FROM STUDIES
	WHERE COURSE = 'DAP';

--4. Display the Names and Date of Births of all Programmers Born in January. 
SELECT PNAME, DOB
FROM PROGRAMMER
WHERE MONTH(DOB)='01';

--5. What is the Highest Number of copies sold by a Package?
SELECT MAX(SOLD) AS HIGHEST_COPIES_SOLD 
FROM SOFTWARE;

--6. Display lowest course Fee. 
SELECT MIN(COURSE_FEE) AS LOWEST_FEE 
FROM STUDIES;

--7. How many programmers done the PGDCA Course?
SELECT COUNT(*) AS PROGRAMMERS_DONE_PGDCA
FROM STUDIES
WHERE COURSE='PGDCA';

--8. How much revenue has been earned through sales of Packages Developed in C.
SELECT SUM(SCOST*SOLD)  AS REVENUE 
FROM SOFTWARE 
WHERE DEVELOPIN='C';

--9. Display the Details of the Software Developed by Ramesh. 
	SELECT TITLE AS SOFTWARE, DEVELOPIN, SCOST, DCOST, SOLD
	FROM SOFTWARE
	WHERE PNAME = 'Ramesh';

--10. How many Programmers Studied at Sabhari?
SELECT COUNT(*) AS NO_OF_PROGRAMMERS
FROM STUDIES
WHERE INSTITUTE='SABHARI';

--11. Display details of Packages whose sales crossed the 2000 Mark.
SELECT * FROM SOFTWARE 
WHERE (SOLD*SCOST)>=2000;
 
--12. Display the Details of Packages for which Development Cost have been recovered. 
SELECT * FROM SOFTWARE
WHERE (SCOST*SOLD) > = DCOST;

--13. What is the cost of the costliest software development in Basic?
SELECT TOP 1 TITLE, DCOST 
FROM SOFTWARE
WHERE DEVELOPIN='BASIC' 
ORDER BY DCOST DESC;

--14. How many Packages Developed in DBASE?
SELECT COUNT(*) AS PACKAGES_DEVELOPIN_DBASE
FROM SOFTWARE
WHERE DEVELOPIN='DBASE';

--15. How many programmers studied in Pragathi?
SELECT COUNT(*) AS NO_OF_PROGRAMMERS
FROM STUDIES
WHERE INSTITUTE='Pragathi';

--16. How many Programmers Paid 5000 to 10000 for their course?
SELECT COUNT(DISTINCT PNAME) NO_OF_PROGRAMMERS
FROM STUDIES
WHERE COURSE_FEE BETWEEN 5000 AND 10000;

--17. What is AVG Course Fee
SELECT AVG(COURSE_FEE)
FROM STUDIES;


--18. Display the details of the Programmers Knowing C. 
	SELECT * FROM PROGRAMMER
	WHERE PROF1 = ‘C’ OR PROF2 = ‘C’;

--19. How many Programmers know either COBOL or PASCAL.
SELECT COUNT(*) AS NO_OF_PROGRAMMER 
FROM PROGRAMMER
WHERE PROF1 IN ('COBOL','PASCAL') OR PROF2 IN ('COBOL', 'PASCAL');

--20. How many Programmers Don’t know PASCAL and C
SELECT COUNT(*) AS NO_OF_PROGRAMMER 
FROM PROGRAMMER
WHERE PROF1 NOT IN ('C','PASCAL') OR PROF2 NOT IN ('C', 'PASCAL');

--21. How old is the Oldest Male Programmer.
SELECT TOP 1 PNAME, CAST(DATEDIFF(DAY, DOB, CAST(GETDATE() AS DATE))/365.25 AS INT) AS AGE
FROM PROGRAMMER
WHERE GENDER = 'M'
ORDER BY AGE DESC;

--22. What is the AVG age of Female Programmers?
SELECT AVG(AGE) FROM 
(SELECT PNAME, CAST(DATEDIFF(DAY, DOB, CAST(GETDATE() AS DATE))/365.25 AS INT) AS AGE
FROM PROGRAMMER
WHERE GENDER = 'F') A;

--23. Calculate the Experience in Years for each Programmer and Display with their names in Descending order.
SELECT PNAME, CAST(DATEDIFF(DAY, DOJ, CAST(GETDATE() AS DATE))/365.25 AS INT) AS EXPERIENCE_YRS
FROM PROGRAMMER
ORDER BY EXPERIENCE_YRS DESC;
--OR
SELECT PNAME , DATEDIFF(YY,DOJ,GETDATE()) AS EXPERIENCE_YRS 
FROM PROGRAMMER  
ORDER BY EXPERIENCE_YRS DESC;

--24. Who are the Programmers who celebrate their Birthday’s During the Current Month?
SELECT PNAME, DOB
FROM PROGRAMMER 
WHERE MONTH(DOB) = MONTH(GETDATE());

--25. How many Female Programmers are there?
SELECT COUNT(*) 
FROM PROGRAMMER
WHERE GENDER='F';

--26. What are the Languages studied by Male Programmers? 
	SELECT PROF1 AS LANGUAGES FROM PROGRAMMER
            WHERE GENDER = 'M'
	UNION
	SELECT PROF2 AS LANGUAGES FROM PROGRAMMER
            WHERE GENDER = 'M';

--27. What is the AVG Salary?
SELECT AVG(SALARY) AS AVG_SALARY
FROM PROGRAMMER;

--28. How many people draw salary 2000 to 4000?
SELECT COUNT(*) NO_OF_PEOPLE
FROM PROGRAMMER
WHERE SALARY BETWEEN 2000 AND 4000;

--29. Display the details of those who don’t know Clipper, COBOL or PASCAL.
SELECT *  FROM PROGRAMMER
WHERE PROF1 NOT IN ('CLIPPER','COBOL','PASCAL') AND PROF2 NOT IN ('CLIPPER','COBOL', 'PASCAL');

--30. Display the Cost of Package Developed By each Programmer.
SELECT PNAME , SUM(DCOST) AS COST 
FROM SOFTWARE 
GROUP BY PNAME;

--31. Display the sales values of the Packages Developed by the each Programmer.
SELECT PNAME, SUM(SCOST* SOLD) AS TOTAL_SALES 
FROM SOFTWARE 
GROUP BY PNAME;

--32. Display the Number of Packages sold by Each Programmer.
SELECT PNAME, SUM(SOLD) AS PACKAGE_SOLD 
FROM SOFTWARE
GROUP BY PNAME;

--33. Display the sales cost of the packages Developed by each Programmer Language wise.
SELECT DEVELOPIN ,SUM(SCOST) AS TOTAL_SALES_COST 
FROM SOFTWARE 
GROUP BY DEVELOPIN;

--34. Display each language name with AVG Development Cost, AVG Selling Cost and
--AVG Price per Copy.
SELECT DEVELOPIN , AVG(DCOST) AS AVG_DCOST ,AVG(SCOST) AS AVG_SCOST , 
IIF(SUM(SOLD)<>0 ,SUM(SCOST)/SUM(SOLD),0) AS AVG_PRICE_PER_COPY
FROM SOFTWARE 
GROUP BY DEVELOPIN;

--35. Display each programmer’s name, costliest and 
--cheapest Packages Developed by him or her.
WITH CTE1 AS (SELECT PNAME, MAX(SCOST) MAX_COST_PACKAGE
FROM SOFTWARE
GROUP BY PNAME),
CTE2 AS (SELECT PNAME, MIN(SCOST) MIN_COST_PACKAGE
FROM SOFTWARE
GROUP BY PNAME)
SELECT A.PNAME, MAX_COST_PACKAGE, MIN_COST_PACKAGE
FROM CTE1 A
FULL OUTER JOIN CTE2 B ON A.PNAME = B.PNAME

--36. Display each institute name with number of Courses, Average Cost per Course.
SELECT INSTITUTE, COUNT(DISTINCT COURSE) AS NO_OF_COURSES, 
AVG(COURSE_FEE) AS AVG_COURSE_FEE
FROM STUDIES
GROUP BY INSTITUTE;

--37. Display each institute Name with Number of Students.
SELECT INSTITUTE, COUNT(DISTINCT PNAME) AS NO_OF_STUDENTS 
FROM STUDIES
GROUP BY INSTITUTE;

--38. Display Names of Male and Female Programmers. Gender also.
SELECT PNAME, GENDER
FROM PROGRAMMER
ORDER BY GENDER DESC;

--39. Display the Name of Programmers and Their Packages.
SELECT PNAME, (12*SALARY) AS PACKAGE
FROM PROGRAMMER;
--OR
SELECT PNAME, COUNT(DISTINCT TITLE) AS PACKAGES
FROM SOFTWARE
GROUP BY PNAME;

--40. Display the Number of Packages in Each Language Except C and C++.
SELECT DEVELOPIN, COUNT(DISTINCT TITLE) AS NO_OF_PACKAGES
FROM (SELECT * FROM SOFTWARE WHERE DEVELOPIN NOT IN ('C','CPP')) A
GROUP BY DEVELOPIN;

--41. Display the Number of Packages in Each Language for which Development Cost is
--less than 1000.
SELECT DEVELOPIN,COUNT(DISTINCT TITLE) AS NO_OF_PACKAGES
FROM (SELECT * FROM SOFTWARE WHERE DCOST<1000) A
GROUP BY DEVELOPIN;

--42. Display AVG Difference between SCOST, DCOST for Each Package.
 SELECT DEVELOPIN,AVG(DCOST - SCOST) AVG_COST_DIFFERENCE 
 FROM SOFTWARE 
 GROUP BY DEVELOPIN;

--43. Display the total SCOST, DCOST and amount to Be Recovered for each
--Programmer for Those Whose Cost has not yet been Recovered.
SELECT PNAME, SUM(SCOST) AS TOTAL_SCOST, SUM(DCOST) AS TOTAL_DCOST, 
ABS(SUM(SCOST)-SUM(DCOST)) AS RECOVERY_AMOUNT
FROM SOFTWARE
GROUP BY PNAME
HAVING ABS(SUM(SCOST)-SUM(DCOST)) < = 0;

--44. Display Highest, Lowest and Average Salaries for 
--those earning more than 2000.
SELECT MAX(SALARY) AS HIGHEST_SALARY, MIN(SALARY) AS LOWEST_SALARY, 
AVG(SALARY) AS AVG_SALARY
FROM (SELECT * FROM PROGRAMMER WHERE SALARY > 2000) A;

--45. Who is the Highest Paid C Programmers? 
SELECT PNAME, MAX(SALARY) AS HIGHEST_SALARY
FROM PROGRAMMER
WHERE PROF1 = 'C' OR PROF2='C'
GROUP BY PNAME;

--46. Who is the Highest Paid Female COBOL Programmer?
SELECT TOP 1 PNAME, SALARY
FROM PROGRAMMER
WHERE GENDER='F'
AND (PROF1='COBOL' OR PROF2='COBOL')
ORDER BY SALARY DESC;

--47. Display the names of the highest paid programmers for each Language.
WITH CTC AS (
  SELECT PNAME, SALARY, PROF1 AS PROF FROM programmer
  UNION 
  SELECT PNAME, SALARY, PROF2 FROM programmer
)
SELECT p1.PNAME, p1.PROF, p1.SALARY
FROM CTC as p1
LEFT JOIN CTC as 
p2
  ON p1.PROF = p2.PROF AND p1.SALARY < p2.SALARY
WHERE p2.PNAME IS NULL;

--48. Who is the least experienced Programmer.
SELECT TOP 1 PNAME, CAST(DATEDIFF(DAY, DOJ, CAST(GETDATE() AS DATE))/365.25 AS INT) AS EXPERIENCE_YRS
FROM PROGRAMMER
ORDER BY EXPERIENCE_YRS;

--49. Who is the most experienced male programmer knowing PASCAL.
SELECT TOP 1 PNAME, CAST(DATEDIFF(DAY, DOJ, CAST(GETDATE() AS DATE))/365.25 AS INT) AS EXPERIENCE_YRS
FROM PROGRAMMER
WHERE PROF1='PASCAL' OR PROF2='PASCAL'AND GENDER='M'
ORDER BY EXPERIENCE_YRS DESC;

--50. Which Language is known by only one Programmer?
SELECT PROF1 AS LANGUAGES_KNOWN_BY_ONLY_ONE_PROGRAMMER FROM PROGRAMMER
GROUP BY PROF1
HAVING PROF1 NOT IN
(SELECT PROF2 FROM PROGRAMMER)
AND COUNT(PROF1)=1
UNION
SELECT PROF2 LANGUAGES_KNOWN_BY_ONLY_ONE_PROGRAMMER FROM PROGRAMMER
GROUP BY PROF2
HAVING PROF2 NOT IN
(SELECT PROF1 FROM PROGRAMMER)
AND COUNT(PROF2)=1;

--51. Who is the Above Programmer Referred in 50?
CREATE TABLE PSLang(PROF VARCHAR(20))

Select * from pslang

INSERT INTO PSLang 
SELECT PROF1 FROM programmer 
GROUP BY PROF1 HAVING
PROF1 NOT IN (SELECT PROF2 FROM programmer) 
AND COUNT(PROF1)=1
UNION
SELECT PROF2 FROM programmer 
GROUP BY PROF2 HAVING
PROF2 NOT IN (SELECT PROF1 FROM programmer) 
AND COUNT(PROF2)=1

SELECT PNAME, PROF FROM programmer 
INNER JOIN PSLang ON
PROF=PROF1 OR PROF=PROF2;

--52. Who is the Youngest Programmer knowing DBASE?
SELECT TOP 1 PNAME, CAST(DATEDIFF(DAY, DOB, CAST(GETDATE() AS DATE))/365.25 AS INT) AGE
FROM PROGRAMMER
WHERE PROF1='DBASE' OR  PROF2='DBASE'
ORDER BY AGE;

--53. Which Female Programmer earning more than 3000 does not know C, C++, ORACLE or DBASE?
SELECT PNAME 
FROM PROGRAMMER
WHERE GENDER='F' AND PROF1 NOT IN ('C', 'CPP', 'ORACLE','DBASE')
AND PROF2 NOT IN ('C', 'CPP', 'ORACLE','DBASE') AND SALARY > 3000;

--54. Which Institute has most number of Students?
WITH CTE AS (SELECT INSTITUTE, COUNT(PNAME) AS NO_OF_STUDENTS
FROM STUDIES
GROUP BY INSTITUTE)

SELECT INSTITUTE, NO_OF_STUDENTS 
FROM CTE
WHERE NO_OF_STUDENTS = (SELECT MAX(NO_OF_STUDENTS) FROM CTE) ;

--55. What is the Costliest course?
SELECT DISTINCT TOP 1 COURSE, COURSE_FEE
FROM STUDIES
ORDER BY COURSE_FEE DESC;

--56. Which course has been done by the most of the Students?
WITH CTE1 AS (SELECT COURSE, COUNT(DISTINCT PNAME) AS NO_OF_STUDENTS
FROM STUDIES
GROUP BY COURSE)
SELECT COURSE, NO_OF_STUDENTS 
FROM CTE1
WHERE NO_OF_STUDENTS = (SELECT MAX(NO_OF_STUDENTS) FROM CTE1)

--57. Which Institute conducts costliest course.
CREATE TABLE CourStudNo (CourNam VARCHAR(20), StdNo INT)

INSERT INTO CourStudNo
SELECT COURSE,COUNT(PNAME) FROM studies GROUP BY COURSE

select * from CourStudNo

SELECT CourNam,StdNo AS COUNT_OF_STUDENTS FROM CourStudNo WHERE StdNo = 
(SELECT MAX(StdNo) FROM CourStudNo);

--58. Display the name of the Institute and Course, which has below AVG course fee.
SELECT DISTINCT INSTITUTE, COURSE 
FROM STUDIES 
WHERE COURSE_FEE  < (SELECT AVG(COURSE_FEE) FROM STUDIES);

--59. Display the names of the courses whose fees are within 1000 (+ or -) of the Average Fee.
SELECT DISTINCT INSTITUTE, COURSE 
FROM STUDIES 
WHERE COURSE_FEE  <= (SELECT AVG(COURSE_FEE)+ 1000 FROM STUDIES) 
AND COURSE_FEE >= (SELECT AVG(COURSE_FEE)- 1000 FROM STUDIES);

--60. Which package has the Highest Development cost?
SELECT TITLE FROM SOFTWARE
WHERE DCOST = (SELECT MAX(DCOST) FROM SOFTWARE)

--61. Which course has below AVG number of Students?
CREATE TABLE #COURSE_STUDENTS (COURSE VARCHAR(30), NO_OF_STUDENTS INT)
INSERT INTO #COURSE_STUDENTS
	SELECT COURSE, COUNT(DISTINCT PNAME)
	FROM STUDIES
	GROUP BY COURSE

SELECT * FROM #COURSE_STUDENTS

SELECT * FROM #COURSE_STUDENTS
WHERE NO_OF_STUDENTS <= (SELECT AVG(NO_OF_STUDENTS) FROM #COURSE_STUDENTS);

--62. Which Package has the lowest selling cost?
SELECT DISTINCT TITLE, SCOST 
FROM SOFTWARE
WHERE SCOST = (SELECT MIN(SCOST) FROM SOFTWARE);

--63. Who Developed the Package that has sold the least number of copies?
SELECT PNAME, TITLE, SOLD
FROM SOFTWARE
WHERE SOLD = (SELECT MIN(SOLD) FROM SOFTWARE);

--64. Which language has used to develop the package, which has the highest sales amount? 
SELECT TITLE, DEVELOPIN, SOLD
FROM SOFTWARE
WHERE SOLD = (SELECT MAX(SOLD) FROM SOFTWARE);

--65. How many copies of package that has the least difference between development and selling cost where sold.
SELECT TITLE, SOLD
FROM SOFTWARE
WHERE ABS(SCOST-DCOST) = (SELECT MIN(ABS(SCOST-DCOST)) FROM SOFTWARE);

--66. Which is the costliest package developed in PASCAL.
SELECT TITLE, SCOST
FROM SOFTWARE
WHERE SCOST = (SELECT MAX(SCOST) FROM SOFTWARE);

--67. Which language was used to develop the most number of Packages.
CREATE TABLE #TEMP_TBL1(DEVELOPIN VARCHAR(30), NO_OF_PACKAGES INT)

INSERT INTO #TEMP_TBL1
SELECT DEVELOPIN, COUNT(DISTINCT TITLE) AS NO_OF_PACKAGES 
FROM SOFTWARE
GROUP BY DEVELOPIN

SELECT * FROM #TEMP_TBL1

SELECT DEVELOPIN, NO_OF_PACKAGES 
FROM #TEMP_TBL1
WHERE NO_OF_PACKAGES = (SELECT MAX(NO_OF_PACKAGES) FROM #TEMP_TBL1)

--68. Which programmer has developed the highest number of Packages?
DECLARE @PACKAGES_BY_PROGRAMMERS TABLE (PNAME VARCHAR(30), NPACKAGES INT)

INSERT INTO @PACKAGES_BY_PROGRAMMERS
SELECT PNAME, COUNT(DISTINCT TITLE)
FROM SOFTWARE
GROUP BY PNAME

SELECT * FROM @PACKAGES_BY_PROGRAMMERS

SELECT PNAME, NPACKAGES
FROM @PACKAGES_BY_PROGRAMMERS
WHERE NPACKAGES = (SELECT MAX(NPACKAGES) FROM @PACKAGES_BY_PROGRAMMERS);

--OR
SELECT PNAME 
FROM SOFTWARE 
GROUP BY PNAME 
HAVING PNAME = (SELECT MAX(PNAME) FROM SOFTWARE);

--69. Who is the Author of the Costliest Package?
SELECT PNAME 
FROM SOFTWARE 
WHERE SCOST = (SELECT MAX(SCOST) FROM SOFTWARE);

--70. Display the names of the packages, which have sold less than the AVG number of copies.
SELECT TITLE, SOLD
FROM SOFTWARE
WHERE SOLD < (SELECT AVG(SOLD) FROM SOFTWARE);

--71. Who are the authors of the Packages, which have recovered more than double the Development cost?
SELECT  DISTINCT PNAME 
FROM SOFTWARE 
WHERE SOLD*SCOST > 2*DCOST;

--72. Display the programmer Name and the cheapest packages developed by them in each language.
SELECT PNAME,TITLE 
FROM SOFTWARE 
WHERE DCOST IN (SELECT MIN(DCOST) FROM SOFTWARE GROUP BY DEVELOPIN);

--73. Display the language used by each programmer to develop the Highest Selling and Lowest-selling package.
CREATE TABLE #TBL1 (PNAME VARCHAR(30), DEVELOPIN VARCHAR(30), HIGHEST_COST INT) 
INSERT INTO #TBL1
SELECT PNAME, DEVELOPIN, MAX(SCOST)
FROM SOFTWARE
GROUP BY PNAME, DEVELOPIN

CREATE TABLE #TBL2 (PNAME VARCHAR(30), DEVELOPIN VARCHAR(30), LOWEST_COST INT) 
INSERT INTO #TBL2 
SELECT PNAME, DEVELOPIN, MIN(SCOST)
FROM SOFTWARE
GROUP BY PNAME, DEVELOPIN

SELECT * FROM #TBL1
SELECT * FROM #TBL2

SELECT A.PNAME, A.DEVELOPIN AS HIGHEST_DEVELOPIN,
HIGHEST_COST, B.DEVELOPIN AS LOWEST_DEVELOPIN, LOWEST_COST
FROM #TBL1 A
LEFT OUTER JOIN #TBL2 B ON A.PNAME = B.PNAME AND A.DEVELOPIN <>B.DEVELOPIN
ORDER BY A.PNAME;

--OR 
SELECT PNAME, DEVELOPIN FROM SOFTWARE WHERE SOLD IN (SELECT MAX(SOLD) FROM SOFTWARE GROUP BY PNAME)
UNION
SELECT PNAME, DEVELOPIN FROM SOFTWARE WHERE SOLD IN (SELECT MIN(SOLD) FROM SOFTWARE GROUP BY PNAME);

--74. Who is the youngest male Programmer born in 1965?
DECLARE @MALE_PROGRAMMER_AGES TABLE (PNAME VARCHAR (30), AGE FLOAT)
INSERT INTO @MALE_PROGRAMMER_AGES
SELECT PNAME, (DATEDIFF(DAY, DOB, CAST(GETDATE() AS DATE))/365.250) AGE
FROM PROGRAMMER
WHERE GENDER='M' AND YEAR(DOB)='1965'

SELECT PNAME, CAST(AGE AS INT) AS AGE 
FROM @MALE_PROGRAMMER_AGES
WHERE AGE IN (SELECT MIN(AGE) FROM @MALE_PROGRAMMER_AGES)

--75. Who is the oldest Female Programmer who joined in 1992?
DECLARE @FEMALE_PROGRAMMER_AGES TABLE (PNAME VARCHAR (30), AGE FLOAT)
INSERT INTO @FEMALE_PROGRAMMER_AGES
SELECT PNAME, (DATEDIFF(DAY, DOB, CAST(GETDATE() AS DATE))/365.250) AGE
FROM PROGRAMMER
WHERE GENDER='F' AND YEAR(DOJ)='1992'

SELECT PNAME, CAST(AGE AS INT) AS AGE 
FROM @FEMALE_PROGRAMMER_AGES
WHERE AGE IN (SELECT MAX(AGE) FROM @FEMALE_PROGRAMMER_AGES)

--76. In which year was the most number of Programmers born.
DECLARE @PYEAR TABLE (BIRTH_YEAR INT, N_PROGRAMMERS INT)
INSERT INTO @PYEAR
SELECT YEAR(DOB), COUNT(*) 
FROM  PROGRAMMER
GROUP BY YEAR(DOB)

SELECT * FROM @PYEAR
WHERE N_PROGRAMMERS = (SELECT MAX(N_PROGRAMMERS) FROM @PYEAR)

--77. In which month did most number of programmers join?
DECLARE @PYEAR TABLE (JOIN_YEAR INT, N_PROGRAMMERS INT)
INSERT INTO @PYEAR
SELECT YEAR(DOJ), COUNT(*) 
FROM  PROGRAMMER
GROUP BY YEAR(DOJ)

SELECT * FROM @PYEAR
WHERE N_PROGRAMMERS = (SELECT MAX(N_PROGRAMMERS) FROM @PYEAR)

--78. In which language are most of the programmer’s proficient.
DECLARE @PROF_LANGUAGE TABLE (PROF_LANGUAGE VARCHAR(30), N_PROGRAMMERS INT)
INSERT INTO @PROF_LANGUAGE
SELECT PROF, COUNT(PROF)
FROM (SELECT PROF1 AS PROF FROM PROGRAMMER
UNION ALL
SELECT PROF2 AS PROF FROM PROGRAMMER) A
GROUP BY PROF

SELECT * FROM @PROF_LANGUAGE
WHERE N_PROGRAMMERS = (SELECT MAX(N_PROGRAMMERS) FROM @PROF_LANGUAGE);

--79. Who are the male programmers earning below the AVG salary of Female Programmers?
DECLARE @FemaleProgSalary TABLE (PNAME VARCHAR(30), SALARY INT)
INSERT INTO @FemaleProgSalary
SELECT PNAME, SALARY
FROM PROGRAMMER
WHERE GENDER='F'

SELECT AVG(SALARY) AS AVG_FEMALE_PROG_SAL FROM @FemaleProgSalary

SELECT PNAME, SALARY 
FROM PROGRAMMER
WHERE GENDER='M' AND SALARY<(SELECT AVG(SALARY) FROM @FemaleProgSalary);

--80. Who are the Female Programmers earning more than the Highest Paid?
SELECT PNAME 
FROM PROGRAMMER 
WHERE GENDER = 'F' AND SALARY > (SELECT(MAX(SALARY)) FROM PROGRAMMER WHERE GENDER = 'M');

--81. Which language has been stated as the proficiency by most of the Programmers?
DECLARE @PROF_LANGUAGE TABLE (PROF_LANGUAGE VARCHAR(30), N_PROGRAMMERS INT)
INSERT INTO @PROF_LANGUAGE
SELECT PROF, COUNT(PROF)
FROM (SELECT PROF1 AS PROF FROM PROGRAMMER
UNION ALL
SELECT PROF2 AS PROF FROM PROGRAMMER) A
GROUP BY PROF

SELECT PROF_LANGUAGE FROM @PROF_LANGUAGE
WHERE N_PROGRAMMERS = (SELECT MAX(N_PROGRAMMERS) FROM @PROF_LANGUAGE);
--OR
SELECT PROF1 FROM PROGRAMMER GROUP BY PROF1 HAVING PROF1 = (SELECT MAX(PROF1) FROM PROGRAMMER)
union
SELECT PROF2 FROM PROGRAMMER GROUP BY PROF2 HAVING PROF2 = (SELECT MAX(PROF2) FROM PROGRAMMER);

--82. Display the details of those who are drawing the same salary.
SELECT A.PNAME, A.SALARY
FROM PROGRAMMER A
JOIN PROGRAMMER B ON A.PNAME <> B.PNAME AND A.SALARY = B.SALARY
ORDER BY SALARY;

--OR

SELECT PNAME, SALARY 
FROM PROGRAMMER 
WHERE SALARY IN
(SELECT SALARY FROM PROGRAMMER GROUP BY SALARY HAVING COUNT(SALARY) > 1)
ORDER BY SALARY;

--83. Display the details of the Software Developed by the Male Programmers Earning More than 3000/-.
SELECT A.PNAME, A.TITLE, A.DEVELOPIN, A.SCOST, A.DCOST, A.SOLD 
FROM SOFTWARE A
JOIN PROGRAMMER B ON A.PNAME = B.PNAME
WHERE B.GENDER = 'M' AND B.SALARY > 3000

--84. Display the details of the packages developed in Pascal by the Female Programmers.
SELECT A.PNAME, A.TITLE, A.DEVELOPIN, A.SCOST, A.DCOST, A.SOLD 
FROM SOFTWARE A
JOIN PROGRAMMER B ON A.PNAME = B.PNAME
WHERE B.GENDER = 'F' AND A.DEVELOPIN='PASCAL'

--85. Display the details of the Programmers who joined before 1990.
SELECT * FROM PROGRAMMER
WHERE DOJ < '1990-01-01'

--86. Display the details of the Software Developed in C By female programmers of Pragathi.
SELECT A.PNAME, A.TITLE, A.DEVELOPIN, A.SCOST, A.DCOST, A.SOLD 
FROM SOFTWARE A
JOIN PROGRAMMER B ON A.PNAME = B.PNAME
JOIN STUDIES C ON C.PNAME = A.PNAME
WHERE B.GENDER = 'F' AND C.INSTITUTE='PRAGATHI';

--87. Display the number of packages, No. of Copies Sold and sales value of each programmer institute wise.
SELECT studies.institute, count(software.developin) AS developin, 
count(software.sold) As Sold, sum(software.sold*software.scost) AS sales 
from software,studies
where software.pname =studies.pname group by studies.institute;

--88. Display the details of the software developed in DBASE by Male Programmers,  who belong to the institute in which most number of Programmers studied.
CREATE TABLE #N_INST (INSTITUTE VARCHAR (30), N_STUDENTS INT)
INSERT INTO #N_INST
SELECT INSTITUTE, COUNT(PNAME)
FROM STUDIES
GROUP BY INSTITUTE

DECLARE @INST VARCHAR (30) = 
(SELECT INSTITUTE FROM #N_INST WHERE N_STUDENTS = (SELECT MAX(N_STUDENTS) FROM #N_INST))

SELECT A.PNAME, B.GENDER, C.INSTITUTE, A.TITLE, A.DEVELOPIN, A.SCOST, A.DCOST, A.SOLD 
FROM SOFTWARE A
JOIN PROGRAMMER B ON A.PNAME = B.PNAME
JOIN STUDIES C ON C.PNAME = A.PNAME
WHERE B.GENDER = 'M' AND A.DEVELOPIN = 'DBASE' AND  C.INSTITUTE=@INST;

--89. Display the details of the software Developed by the male programmers Born before 1965 and female programmers born after 1975.
SELECT A.PNAME, B.DOB, B.GENDER, A.TITLE, A.DEVELOPIN, A.SCOST, A.DCOST, A.SOLD 
FROM SOFTWARE A
JOIN PROGRAMMER B ON A.PNAME = B.PNAME
WHERE B.DOB<'1965-01-01' AND B.GENDER='M'
UNION
SELECT A.PNAME, B.DOB, B.GENDER, A.TITLE, A.DEVELOPIN, A.SCOST, A.DCOST, A.SOLD 
FROM SOFTWARE A
JOIN PROGRAMMER B ON A.PNAME = B.PNAME
WHERE B.DOB>'1975-12-31' AND B.GENDER='F';


--90. Display the details of the software that has developed in the language which is neither the first nor the second proficiency of the programmers.
SELECT S.* FROM PROGRAMMER P,SOFTWARE S
WHERE S.PNAME = P.PNAME AND (DEVELOPIN <> PROF1 AND DEVELOPIN <> PROF2);

--91. Display the details of the software developed by the male students of Sabhari.
SELECT A.*, B.GENDER, C.INSTITUTE 
FROM SOFTWARE A
JOIN PROGRAMMER B ON A.PNAME = B.PNAME
JOIN STUDIES C ON A.PNAME = C.PNAME
WHERE GENDER = 'M' AND INSTITUTE = 'SABHARI';

--92. Display the names of the programmers who have not developed any packages.
SELECT PNAME 
FROM PROGRAMMER P
WHERE PNAME NOT IN (SELECT PNAME FROM SOFTWARE);

--93. What is the total cost of the Software developed by the programmers of Apple?
SELECT SUM(SCOST) AS TOTAL_COST 
FROM SOFTWARE S,STUDIES ST
WHERE S.PNAME = S.PNAME AND INSTITUTE='APPLE';

--94. Who are the programmers who joined on the same day?
SELECT A.PNAME, A.DOJ 
FROM PROGRAMMER A
JOIN PROGRAMMER B ON A.PNAME <> B.PNAME AND A.DOJ = B.DOJ
ORDER BY A.DOJ;
 
--95. Who are the programmers who have the same Prof2?
SELECT A.PNAME, A.PROF2 
FROM PROGRAMMER A
JOIN PROGRAMMER B ON A.PNAME <> B.PNAME AND A.PROF2 = B.PROF2
ORDER BY A.PROF2;

--96. Display the total sales value of the software, institute wise.
SELECT STUDIES.INSTITUTE, SUM(SOFTWARE.SOLD*SOFTWARE.SCOST) AS TOTAL_SALES
FROM SOFTWARE,STUDIES
WHERE STUDIES.PNAME = SOFTWARE.PNAME 
GROUP BY STUDIES.INSTITUTE;

--97. In which institute does the person who developed the costliest package studied.
SELECT INSTITUTE 
FROM SOFTWARE ST,STUDIES S
WHERE S.PNAME = ST.PNAME 
GROUP BY INSTITUTE,DCOST 
HAVING DCOST=(SELECT MAX(DCOST) FROM SOFTWARE);

--98. Which language listed in prof1, prof2 has not been used to develop any package.
SELECT P_LANGUAGE FROM (SELECT DISTINCT PROF1 AS P_LANGUAGE FROM PROGRAMMER
UNION
SELECT DISTINCT PROF2 AS P_LANGUAGE FROM PROGRAMMER) A
WHERE P_LANGUAGE NOT IN (SELECT DISTINCT DEVELOPIN FROM SOFTWARE);

--99. How much does the person who developed the highest selling package earn and what course did HE/SHE undergo.
SELECT P1.SALARY,S2.COURSE 
FROM PROGRAMMER P1,SOFTWARE S1,STUDIES S2
WHERE P1.PNAME=S1.PNAME AND S1.PNAME=S2.PNAME 
AND SCOST=(SELECT MAX(SCOST) FROM SOFTWARE);

--100. What is the AVG salary for those whose software sales is more than 50,000/-.
SELECT AVG(SALARY) AS AVG_SALARY 
FROM PROGRAMMER P,SOFTWARE S
WHERE P .PNAME=S.PNAME AND SOLD*SCOST>50000;

--101. How many packages were developed by students, who studied in institute that charge the lowest course fee?
SELECT S.PNAME, COUNT(TITLE) AS PACKAGES 
FROM SOFTWARE S,STUDIES ST
WHERE S.PNAME = ST.PNAME 
GROUP BY S.PNAME,COURSE_FEE 
HAVING MIN(COURSE_FEE)=(SELECT MIN(COURSE_FEE) FROM STUDIES);

--102. How many packages were developed by the person who developed the cheapest package, where did HE/SHE study?
SELECT COUNT(DEVELOPIN) 
FROM PROGRAMMER P,SOFTWARE S
WHERE S .PNAME=P.PNAME 
GROUP BY DEVELOPIN 
HAVING MIN(DCOST)=(SELECT MIN(DCOST) FROM SOFTWARE);

--103. How many packages were developed by the female programmers earning more than the highest paid male programmer?
SELECT COUNT(DEVELOPIN) AS NO_OF_PACKAGES 
FROM PROGRAMMER P,SOFTWARE S
WHERE S.PNAME=P.PNAME AND GENDER='F' AND SALARY>(SELECT MAX(SALARY) FROM PROGRAMMER P,SOFTWARE S
WHERE S.PNAME=P.PNAME AND GENDER='M');

--104. How many packages are developed by the most experienced programmer form BDPS.
SELECT COUNT(*) NO_OF_PACKAGES
FROM SOFTWARE S,PROGRAMMER P
WHERE P.PNAME=S.PNAME 
GROUP BY DOJ 
HAVING MIN(DOJ)=(SELECT MIN(DOJ)
	FROM STUDIES ST,PROGRAMMER P, SOFTWARE S
	WHERE P.PNAME=S.PNAME AND ST.PNAME=P.PNAME AND (INSTITUTE='BDPS'));

--105. List the programmers (form the software table) and the institutes they studied.
SELECT DISTINCT S.PNAME, ST.INSTITUTE
FROM SOFTWARE S
JOIN STUDIES ST ON S.PNAME = ST.PNAME;

--106. List each PROF with the number of Programmers having that PROF and the number of the packages in that PROF.
CREATE TABLE #TEMP_LAN (LANGUAGES VARCHAR(30))
INSERT INTO #TEMP_LAN
SELECT * FROM (SELECT PROF1 AS LANGUAGE FROM PROGRAMMER
UNION
SELECT PROF2 AS LANGUAGE FROM PROGRAMMER) A

SELECT * FROM #TEMP_LAN

CREATE TABLE #TEMP_PROG (LANGUAGES VARCHAR(30), NO_OF_PROGRAMMER INT)
INSERT INTO #TEMP_PROG
SELECT * FROM (
SELECT LANGUAGES, COUNT(P.PNAME) AS NO_OF_PROGRAMMER
FROM #TEMP_LAN T
LEFT JOIN PROGRAMMER P ON PROF1 = LANGUAGES OR PROF2 = LANGUAGES
GROUP BY LANGUAGES) B

SELECT * FROM #TEMP_PROG

CREATE TABLE #TEMP_PACK (LANGUAGES VARCHAR(30), NO_OF_PACKAGES INT)
INSERT INTO #TEMP_PACK
SELECT * FROM (SELECT LANGUAGES, COUNT(S.TITLE) AS NO_OF_PACKAGES
FROM #TEMP_LAN T1
LEFT JOIN SOFTWARE S ON DEVELOPIN = LANGUAGES
GROUP BY LANGUAGES) C

SELECT * FROM #TEMP_PACK

SELECT P1.LANGUAGES, NO_OF_PROGRAMMER, NO_OF_PACKAGES
FROM #TEMP_PROG P1
FULL OUTER JOIN #TEMP_PACK P2 ON P1.LANGUAGES = P2.LANGUAGES;


--107. List the programmer names (from the programmer table) and No. Of Packages each has developed. 
SELECT P.PNAME, COUNT(S.TITLE) AS N_PACKAGES
FROM PROGRAMMER P
LEFT JOIN SOFTWARE S ON P.PNAME = S.PNAME
GROUP BY P.PNAME
